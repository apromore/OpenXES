plugins {
	// Apply the java-library plugin for API and implementation separation.
	id 'java-library'
	id 'maven-publish'
	id 'net.researchgate.release' version '3.0.2'
	id "io.freefair.lombok" version "6.6-rc1"
}

group = 'org.apromore'
description = 'OpenXES'
sourceCompatibility = '11'

repositories {
	// Use Maven Central for resolving dependencies.
	mavenCentral()

	maven {
		credentials {
            username System.properties['APROMORE_NEXUS_USERNAME'] ?: System.env['APROMORE_NEXUS_USERNAME']
            password System.properties['APROMORE_NEXUS_PASSWORD'] ?: System.env['APROMORE_NEXUS_PASSWORD']
		}
        url = System.properties['APROMORE_NEXUS_RELEASE_REPO'] ?: System.env['APROMORE_NEXUS_RELEASE_REPO']
		metadataSources {
			mavenPom()
			artifact()
		}
	}
}

dependencies {
    api platform('org.apromore:ApromoreEE-BOM:1.0.0')

	api 'org.eclipse.collections:eclipse-collections'
	implementation 'com.thoughtworks.xstream:xstream'
	implementation 'javax.xml.bind:jaxb-api'
	implementation 'org.deckfour:spex'
	implementation 'com.esotericsoftware:kryo'
	implementation 'com.google.guava:guava'
	implementation 'org.springframework.boot:spring-boot-starter-logging'
}

tasks.named('jar') {
	manifest {
		attributes('Implementation-Title': project.name,
				'Implementation-Version': project.version)
	}
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
		}
	}

	repositories {
        maven {
            name = 'apromoreRepo'
            credentials(PasswordCredentials) {
                username System.properties['APROMORE_NEXUS_USERNAME'] ?: System.env['APROMORE_NEXUS_USERNAME']
                password System.properties['APROMORE_NEXUS_PASSWORD'] ?: System.env['APROMORE_NEXUS_PASSWORD']
            }
            def releasesRepoUrl = System.properties['APROMORE_NEXUS_RELEASE_REPO'] ?: System.env['APROMORE_NEXUS_RELEASE_REPO']
            def snapshotsRepoUrl = System.properties['APROMORE_NEXUS_SNAPSHOT_REPO'] ?: System.env['APROMORE_NEXUS_SNAPSHOT_REPO']
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
	}
}

release {
	failOnCommitNeeded = true
	failOnUnversionedFiles = false
	failOnSnapshotDependencies = true
	pushReleaseVersionBranch = 'main'

	scmAdapters = [
			net.researchgate.release.GitAdapter
	]

	git {
		requireBranch.set('')
		pushToRemote.set('origin')
		pushToBranchPrefix.set('')
		commitVersionFileOnly.set(false)
		signTag.set(false)
	}
}

//hooks provided: beforeReleaseBuild which runs before build and
// afterReleaseBuild which runs afterwards
publish.dependsOn clean
afterReleaseBuild.dependsOn publish
